// Generated by view binder compiler. Do not edit!
package com.bdtask.restoraposroomdbtab.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bdtask.restoraposroomdbtab.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class VhSplitterBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView grandTotalSplit;

  @NonNull
  public final TextView grandTotalTv;

  @NonNull
  public final TextView nameHeader;

  @NonNull
  public final TextView orderId;

  @NonNull
  public final TextView payNowSplitId;

  @NonNull
  public final LinearLayout recyclerLayout;

  @NonNull
  public final TextView scTv;

  @NonNull
  public final TextView serviceSplit;

  @NonNull
  public final Spinner spinnercustomername;

  @NonNull
  public final RecyclerView splitterDetRv;

  @NonNull
  public final TextView totalAmountSplit;

  @NonNull
  public final TextView totalAmountTv;

  @NonNull
  public final TextView vatSplit;

  @NonNull
  public final TextView vatTv;

  private VhSplitterBinding(@NonNull CardView rootView, @NonNull TextView grandTotalSplit,
      @NonNull TextView grandTotalTv, @NonNull TextView nameHeader, @NonNull TextView orderId,
      @NonNull TextView payNowSplitId, @NonNull LinearLayout recyclerLayout, @NonNull TextView scTv,
      @NonNull TextView serviceSplit, @NonNull Spinner spinnercustomername,
      @NonNull RecyclerView splitterDetRv, @NonNull TextView totalAmountSplit,
      @NonNull TextView totalAmountTv, @NonNull TextView vatSplit, @NonNull TextView vatTv) {
    this.rootView = rootView;
    this.grandTotalSplit = grandTotalSplit;
    this.grandTotalTv = grandTotalTv;
    this.nameHeader = nameHeader;
    this.orderId = orderId;
    this.payNowSplitId = payNowSplitId;
    this.recyclerLayout = recyclerLayout;
    this.scTv = scTv;
    this.serviceSplit = serviceSplit;
    this.spinnercustomername = spinnercustomername;
    this.splitterDetRv = splitterDetRv;
    this.totalAmountSplit = totalAmountSplit;
    this.totalAmountTv = totalAmountTv;
    this.vatSplit = vatSplit;
    this.vatTv = vatTv;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static VhSplitterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static VhSplitterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.vh_splitter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static VhSplitterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.grandTotalSplit;
      TextView grandTotalSplit = ViewBindings.findChildViewById(rootView, id);
      if (grandTotalSplit == null) {
        break missingId;
      }

      id = R.id.grandTotalTv;
      TextView grandTotalTv = ViewBindings.findChildViewById(rootView, id);
      if (grandTotalTv == null) {
        break missingId;
      }

      id = R.id.nameHeader;
      TextView nameHeader = ViewBindings.findChildViewById(rootView, id);
      if (nameHeader == null) {
        break missingId;
      }

      id = R.id.orderId;
      TextView orderId = ViewBindings.findChildViewById(rootView, id);
      if (orderId == null) {
        break missingId;
      }

      id = R.id.payNowSplitId;
      TextView payNowSplitId = ViewBindings.findChildViewById(rootView, id);
      if (payNowSplitId == null) {
        break missingId;
      }

      id = R.id.recyclerLayout;
      LinearLayout recyclerLayout = ViewBindings.findChildViewById(rootView, id);
      if (recyclerLayout == null) {
        break missingId;
      }

      id = R.id.scTv;
      TextView scTv = ViewBindings.findChildViewById(rootView, id);
      if (scTv == null) {
        break missingId;
      }

      id = R.id.serviceSplit;
      TextView serviceSplit = ViewBindings.findChildViewById(rootView, id);
      if (serviceSplit == null) {
        break missingId;
      }

      id = R.id.spinnercustomername;
      Spinner spinnercustomername = ViewBindings.findChildViewById(rootView, id);
      if (spinnercustomername == null) {
        break missingId;
      }

      id = R.id.splitterDetRv;
      RecyclerView splitterDetRv = ViewBindings.findChildViewById(rootView, id);
      if (splitterDetRv == null) {
        break missingId;
      }

      id = R.id.totalAmountSplit;
      TextView totalAmountSplit = ViewBindings.findChildViewById(rootView, id);
      if (totalAmountSplit == null) {
        break missingId;
      }

      id = R.id.totalAmountTv;
      TextView totalAmountTv = ViewBindings.findChildViewById(rootView, id);
      if (totalAmountTv == null) {
        break missingId;
      }

      id = R.id.vatSplit;
      TextView vatSplit = ViewBindings.findChildViewById(rootView, id);
      if (vatSplit == null) {
        break missingId;
      }

      id = R.id.vatTv;
      TextView vatTv = ViewBindings.findChildViewById(rootView, id);
      if (vatTv == null) {
        break missingId;
      }

      return new VhSplitterBinding((CardView) rootView, grandTotalSplit, grandTotalTv, nameHeader,
          orderId, payNowSplitId, recyclerLayout, scTv, serviceSplit, spinnercustomername,
          splitterDetRv, totalAmountSplit, totalAmountTv, vatSplit, vatTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
