// Generated by view binder compiler. Do not edit!
package com.bdtask.restoraposroomdbtab.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bdtask.restoraposroomdbtab.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class VhSplitterDetailsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView spDetName;

  @NonNull
  public final TextView spDetPrice;

  @NonNull
  public final TextView spDetQuantity;

  @NonNull
  public final TextView spDetTotalPrice;

  @NonNull
  public final TextView spDetVariant;

  private VhSplitterDetailsBinding(@NonNull LinearLayout rootView, @NonNull TextView spDetName,
      @NonNull TextView spDetPrice, @NonNull TextView spDetQuantity,
      @NonNull TextView spDetTotalPrice, @NonNull TextView spDetVariant) {
    this.rootView = rootView;
    this.spDetName = spDetName;
    this.spDetPrice = spDetPrice;
    this.spDetQuantity = spDetQuantity;
    this.spDetTotalPrice = spDetTotalPrice;
    this.spDetVariant = spDetVariant;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static VhSplitterDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static VhSplitterDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.vh_splitter_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static VhSplitterDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.spDetName;
      TextView spDetName = ViewBindings.findChildViewById(rootView, id);
      if (spDetName == null) {
        break missingId;
      }

      id = R.id.spDetPrice;
      TextView spDetPrice = ViewBindings.findChildViewById(rootView, id);
      if (spDetPrice == null) {
        break missingId;
      }

      id = R.id.spDetQuantity;
      TextView spDetQuantity = ViewBindings.findChildViewById(rootView, id);
      if (spDetQuantity == null) {
        break missingId;
      }

      id = R.id.spDetTotalPrice;
      TextView spDetTotalPrice = ViewBindings.findChildViewById(rootView, id);
      if (spDetTotalPrice == null) {
        break missingId;
      }

      id = R.id.spDetVariant;
      TextView spDetVariant = ViewBindings.findChildViewById(rootView, id);
      if (spDetVariant == null) {
        break missingId;
      }

      return new VhSplitterDetailsBinding((LinearLayout) rootView, spDetName, spDetPrice,
          spDetQuantity, spDetTotalPrice, spDetVariant);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
