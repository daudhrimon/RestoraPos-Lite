// Generated by view binder compiler. Do not edit!
package com.bdtask.restoraposroomdbtab.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bdtask.restoraposroomdbtab.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class VhAddonsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView addonMinusBtn;

  @NonNull
  public final TextView addonName;

  @NonNull
  public final ImageView addonPlusBtn;

  @NonNull
  public final TextView addonPrice;

  @NonNull
  public final TextView addonQuantity;

  @NonNull
  public final LinearLayout checkBox;

  @NonNull
  public final ImageView checkedBox;

  @NonNull
  public final ImageView unCheckedBox;

  private VhAddonsBinding(@NonNull LinearLayout rootView, @NonNull ImageView addonMinusBtn,
      @NonNull TextView addonName, @NonNull ImageView addonPlusBtn, @NonNull TextView addonPrice,
      @NonNull TextView addonQuantity, @NonNull LinearLayout checkBox,
      @NonNull ImageView checkedBox, @NonNull ImageView unCheckedBox) {
    this.rootView = rootView;
    this.addonMinusBtn = addonMinusBtn;
    this.addonName = addonName;
    this.addonPlusBtn = addonPlusBtn;
    this.addonPrice = addonPrice;
    this.addonQuantity = addonQuantity;
    this.checkBox = checkBox;
    this.checkedBox = checkedBox;
    this.unCheckedBox = unCheckedBox;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static VhAddonsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static VhAddonsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.vh_addons, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static VhAddonsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addonMinusBtn;
      ImageView addonMinusBtn = ViewBindings.findChildViewById(rootView, id);
      if (addonMinusBtn == null) {
        break missingId;
      }

      id = R.id.addonName;
      TextView addonName = ViewBindings.findChildViewById(rootView, id);
      if (addonName == null) {
        break missingId;
      }

      id = R.id.addonPlusBtn;
      ImageView addonPlusBtn = ViewBindings.findChildViewById(rootView, id);
      if (addonPlusBtn == null) {
        break missingId;
      }

      id = R.id.addonPrice;
      TextView addonPrice = ViewBindings.findChildViewById(rootView, id);
      if (addonPrice == null) {
        break missingId;
      }

      id = R.id.addonQuantity;
      TextView addonQuantity = ViewBindings.findChildViewById(rootView, id);
      if (addonQuantity == null) {
        break missingId;
      }

      id = R.id.checkBox;
      LinearLayout checkBox = ViewBindings.findChildViewById(rootView, id);
      if (checkBox == null) {
        break missingId;
      }

      id = R.id.checkedBox;
      ImageView checkedBox = ViewBindings.findChildViewById(rootView, id);
      if (checkedBox == null) {
        break missingId;
      }

      id = R.id.unCheckedBox;
      ImageView unCheckedBox = ViewBindings.findChildViewById(rootView, id);
      if (unCheckedBox == null) {
        break missingId;
      }

      return new VhAddonsBinding((LinearLayout) rootView, addonMinusBtn, addonName, addonPlusBtn,
          addonPrice, addonQuantity, checkBox, checkedBox, unCheckedBox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
