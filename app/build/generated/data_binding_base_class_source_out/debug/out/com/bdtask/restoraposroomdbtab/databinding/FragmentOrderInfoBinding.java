// Generated by view binder compiler. Do not edit!
package com.bdtask.restoraposroomdbtab.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bdtask.restoraposroomdbtab.R;
import com.toptoche.searchablespinnerlibrary.SearchableSpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentOrderInfoBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView cusAddBtn;

  @NonNull
  public final SearchableSpinner cusNameSpnr;

  @NonNull
  public final ImageView cusTypeAddBtn;

  @NonNull
  public final Spinner cusTypeSpnr;

  @NonNull
  public final ImageView deliveryCmpnyAddBtn;

  @NonNull
  public final TextView deliveryCompanyHeader;

  @NonNull
  public final RelativeLayout deliveryCompanyLay;

  @NonNull
  public final Spinner deliveryCompanySpnr;

  @NonNull
  public final TextView doneBtn;

  @NonNull
  public final TextView nameHeader;

  @NonNull
  public final ImageView ocfBack;

  @NonNull
  public final TextView ongHeader;

  @NonNull
  public final EditText orderIdEt;

  @NonNull
  public final TextView orderIdHeader;

  @NonNull
  public final RelativeLayout orderIdLay;

  @NonNull
  public final ImageView tableAddBtn;

  @NonNull
  public final TextView tableHeader;

  @NonNull
  public final RelativeLayout tableLay;

  @NonNull
  public final Spinner tableSpnr;

  @NonNull
  public final TextView typeHeader;

  @NonNull
  public final ImageView waiterAddBtn;

  @NonNull
  public final TextView waiterHeader;

  @NonNull
  public final RelativeLayout waiterLay;

  @NonNull
  public final Spinner waiterSpnr;

  private FragmentOrderInfoBinding(@NonNull LinearLayout rootView, @NonNull ImageView cusAddBtn,
      @NonNull SearchableSpinner cusNameSpnr, @NonNull ImageView cusTypeAddBtn,
      @NonNull Spinner cusTypeSpnr, @NonNull ImageView deliveryCmpnyAddBtn,
      @NonNull TextView deliveryCompanyHeader, @NonNull RelativeLayout deliveryCompanyLay,
      @NonNull Spinner deliveryCompanySpnr, @NonNull TextView doneBtn, @NonNull TextView nameHeader,
      @NonNull ImageView ocfBack, @NonNull TextView ongHeader, @NonNull EditText orderIdEt,
      @NonNull TextView orderIdHeader, @NonNull RelativeLayout orderIdLay,
      @NonNull ImageView tableAddBtn, @NonNull TextView tableHeader,
      @NonNull RelativeLayout tableLay, @NonNull Spinner tableSpnr, @NonNull TextView typeHeader,
      @NonNull ImageView waiterAddBtn, @NonNull TextView waiterHeader,
      @NonNull RelativeLayout waiterLay, @NonNull Spinner waiterSpnr) {
    this.rootView = rootView;
    this.cusAddBtn = cusAddBtn;
    this.cusNameSpnr = cusNameSpnr;
    this.cusTypeAddBtn = cusTypeAddBtn;
    this.cusTypeSpnr = cusTypeSpnr;
    this.deliveryCmpnyAddBtn = deliveryCmpnyAddBtn;
    this.deliveryCompanyHeader = deliveryCompanyHeader;
    this.deliveryCompanyLay = deliveryCompanyLay;
    this.deliveryCompanySpnr = deliveryCompanySpnr;
    this.doneBtn = doneBtn;
    this.nameHeader = nameHeader;
    this.ocfBack = ocfBack;
    this.ongHeader = ongHeader;
    this.orderIdEt = orderIdEt;
    this.orderIdHeader = orderIdHeader;
    this.orderIdLay = orderIdLay;
    this.tableAddBtn = tableAddBtn;
    this.tableHeader = tableHeader;
    this.tableLay = tableLay;
    this.tableSpnr = tableSpnr;
    this.typeHeader = typeHeader;
    this.waiterAddBtn = waiterAddBtn;
    this.waiterHeader = waiterHeader;
    this.waiterLay = waiterLay;
    this.waiterSpnr = waiterSpnr;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentOrderInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentOrderInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_order_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentOrderInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cusAddBtn;
      ImageView cusAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (cusAddBtn == null) {
        break missingId;
      }

      id = R.id.cusNameSpnr;
      SearchableSpinner cusNameSpnr = ViewBindings.findChildViewById(rootView, id);
      if (cusNameSpnr == null) {
        break missingId;
      }

      id = R.id.cusTypeAddBtn;
      ImageView cusTypeAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (cusTypeAddBtn == null) {
        break missingId;
      }

      id = R.id.cusTypeSpnr;
      Spinner cusTypeSpnr = ViewBindings.findChildViewById(rootView, id);
      if (cusTypeSpnr == null) {
        break missingId;
      }

      id = R.id.deliveryCmpnyAddBtn;
      ImageView deliveryCmpnyAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (deliveryCmpnyAddBtn == null) {
        break missingId;
      }

      id = R.id.deliveryCompanyHeader;
      TextView deliveryCompanyHeader = ViewBindings.findChildViewById(rootView, id);
      if (deliveryCompanyHeader == null) {
        break missingId;
      }

      id = R.id.deliveryCompanyLay;
      RelativeLayout deliveryCompanyLay = ViewBindings.findChildViewById(rootView, id);
      if (deliveryCompanyLay == null) {
        break missingId;
      }

      id = R.id.deliveryCompanySpnr;
      Spinner deliveryCompanySpnr = ViewBindings.findChildViewById(rootView, id);
      if (deliveryCompanySpnr == null) {
        break missingId;
      }

      id = R.id.doneBtn;
      TextView doneBtn = ViewBindings.findChildViewById(rootView, id);
      if (doneBtn == null) {
        break missingId;
      }

      id = R.id.nameHeader;
      TextView nameHeader = ViewBindings.findChildViewById(rootView, id);
      if (nameHeader == null) {
        break missingId;
      }

      id = R.id.ocfBack;
      ImageView ocfBack = ViewBindings.findChildViewById(rootView, id);
      if (ocfBack == null) {
        break missingId;
      }

      id = R.id.ongHeader;
      TextView ongHeader = ViewBindings.findChildViewById(rootView, id);
      if (ongHeader == null) {
        break missingId;
      }

      id = R.id.orderIdEt;
      EditText orderIdEt = ViewBindings.findChildViewById(rootView, id);
      if (orderIdEt == null) {
        break missingId;
      }

      id = R.id.orderIdHeader;
      TextView orderIdHeader = ViewBindings.findChildViewById(rootView, id);
      if (orderIdHeader == null) {
        break missingId;
      }

      id = R.id.orderIdLay;
      RelativeLayout orderIdLay = ViewBindings.findChildViewById(rootView, id);
      if (orderIdLay == null) {
        break missingId;
      }

      id = R.id.tableAddBtn;
      ImageView tableAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (tableAddBtn == null) {
        break missingId;
      }

      id = R.id.tableHeader;
      TextView tableHeader = ViewBindings.findChildViewById(rootView, id);
      if (tableHeader == null) {
        break missingId;
      }

      id = R.id.tableLay;
      RelativeLayout tableLay = ViewBindings.findChildViewById(rootView, id);
      if (tableLay == null) {
        break missingId;
      }

      id = R.id.tableSpnr;
      Spinner tableSpnr = ViewBindings.findChildViewById(rootView, id);
      if (tableSpnr == null) {
        break missingId;
      }

      id = R.id.typeHeader;
      TextView typeHeader = ViewBindings.findChildViewById(rootView, id);
      if (typeHeader == null) {
        break missingId;
      }

      id = R.id.waiterAddBtn;
      ImageView waiterAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (waiterAddBtn == null) {
        break missingId;
      }

      id = R.id.waiterHeader;
      TextView waiterHeader = ViewBindings.findChildViewById(rootView, id);
      if (waiterHeader == null) {
        break missingId;
      }

      id = R.id.waiterLay;
      RelativeLayout waiterLay = ViewBindings.findChildViewById(rootView, id);
      if (waiterLay == null) {
        break missingId;
      }

      id = R.id.waiterSpnr;
      Spinner waiterSpnr = ViewBindings.findChildViewById(rootView, id);
      if (waiterSpnr == null) {
        break missingId;
      }

      return new FragmentOrderInfoBinding((LinearLayout) rootView, cusAddBtn, cusNameSpnr,
          cusTypeAddBtn, cusTypeSpnr, deliveryCmpnyAddBtn, deliveryCompanyHeader,
          deliveryCompanyLay, deliveryCompanySpnr, doneBtn, nameHeader, ocfBack, ongHeader,
          orderIdEt, orderIdHeader, orderIdLay, tableAddBtn, tableHeader, tableLay, tableSpnr,
          typeHeader, waiterAddBtn, waiterHeader, waiterLay, waiterSpnr);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
